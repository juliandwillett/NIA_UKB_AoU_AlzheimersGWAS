### Get GCTA, which has COJO software
wget https://yanglab.westlake.edu.cn/software/gcta/bin/gcta-1.94.1-linux-kernel-3-x86_64.zip
unzip gcta-1.94.1-linux-kernel-3-x86_64.zip

### Pull and process array data:
# Get plink
wget https://s3.amazonaws.com/plink2-assets/alpha3/plink2_linux_avx2_20221024.zip ;\
unzip plink2_linux_avx2_20221024.zip

# Get array data
gsutil -u $GOOGLE_PROJECT -m cp -r gs://fc-secure-f509fd3c-7cd4-49e0-b409-fc98ab38bb4f/data/array_data_pgen_files/arrays_allchr* .

# Get pheno data, so only those individuals in our srWGS cohort are included
gsutil -m cp -r -n gs://fc-secure-4029af59-df13-4d1b-b22c-2ae64cb3dc67/data/regenie_pheno.txt .
awk '{print $1 "\t" $2}' regenie_pheno.txt > ids.txt

# Process data:
./plink2 \
  --pfile arrays_allchr \
  --maf 0.01 --mac 40 --geno 0.1 --hwe 1e-15 \
  --mind 0.1 --chr 1-22 --keep ids.txt \ 
  --make-bed \
  --out arrays_autosomes_post_qc

### Get LD scores. GCTA command took 30 minutes using 8 cores.
cd gcta-1.94.1-linux-kernel-3-x86_64
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --ld-score --ld-wind 1000 \
--ld-rsq-cutoff 0.01 --out ../arrays_autosomes_post_qc_ld --thread-num 8
gsutil -m cp -r -n ../arrays_autosomes_post_qc_ld* gs://fc-secure-4029af59-df13-4d1b-b22c-2ae64cb3dc67/data/ld_array_anc_all/ 

### Next get independent loci using GCTA COJO. Requires uploading summary stats for common variants. Requires processing GWAS data:
## Rcode:
# gwas_common = vroom("aou_AD_any_anc_all_gwas_common_variants_tsv.txt")
# ma_file = gwas_common %>% mutate(ID = glue("chr{CHROM}:{GENPOS}:{ALLELE0}:{ALLELE1}")) %>%
#     select(ID,ALLELE1,ALLELE0,A1FREQ,BETA,SE,LOG10P,N) %>% rename(P=LOG10P) %>% mutate(P=10^(-1 * P))
# vroom_write(ma_file,"ad_any_gwas_common.ma")

## Bash code after uploading this MA file. Most SNPs from array data present in common gwas
./gcta-1.94.1  --bfile ../arrays_autosomes_post_qc --chr 1 --maf 0.01 --cojo-file ../ad_any_gwas_common.ma --cojo-slct \
  --cojo-wind 500 --cojo-p 1e-5 --cojo-collinear 0.99 --out array_cojo_chr1 

## Get heritability using guide:
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --ld-score-region 200 \
    --thread-num 8 --out array_auto_ld # output: ldsc/array_auto_ld.score.ld
# R code:
lds_seg = read.table("array_auto_ld.score.ld",header=T,colClasses=c("character",rep("numeric",8)))
quartiles=summary(lds_seg$ldscore_SNP)

lb1 = which(lds_seg$ldscore_SNP <= quartiles[2])
lb2 = which(lds_seg$ldscore_SNP > quartiles[2] & lds_seg$ldscore_SNP <= quartiles[3])
lb3 = which(lds_seg$ldscore_SNP > quartiles[3] & lds_seg$ldscore_SNP <= quartiles[5])
lb4 = which(lds_seg$ldscore_SNP > quartiles[5])

lb1_snp = lds_seg$SNP[lb1]
lb2_snp = lds_seg$SNP[lb2]
lb3_snp = lds_seg$SNP[lb3]
lb4_snp = lds_seg$SNP[lb4]

write.table(lb1_snp, "snp_group1.txt", row.names=F, quote=F, col.names=F)
write.table(lb2_snp, "snp_group2.txt", row.names=F, quote=F, col.names=F)
write.table(lb3_snp, "snp_group3.txt", row.names=F, quote=F, col.names=F)
write.table(lb4_snp, "snp_group4.txt", row.names=F, quote=F, col.names=F)

# bash
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --extract snp_group1.txt --make-grm --out test_group1 --thread-num 8
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --extract snp_group2.txt --make-grm --out test_group2 --thread-num 8
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --extract snp_group3.txt --make-grm --out test_group3 --thread-num 8
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --extract snp_group4.txt --make-grm --out test_group4 --thread-num 8
printf "test_group1\ntest_group2\ntest_group3\ntest_group4" > multi_GRMs.txt

# must make pheno file, guide here: https://www.biostars.org/p/348026/
awk 'NR>1 {print $1 "\t" $2 "\t" $6}' ../regenie_pheno.txt > grm_phen.phen
./gcta-1.94.1 --bfile ../arrays_autosomes_post_qc --maf 0.01 --make-grm --out test --thread-num 8



gcta64 --grm test --pheno test_cc.phen --reml --prevalence 0.01 --out test --thread-num 10
./gcta-1.94.1 --reml --mgrm multi_GRMs.txt --pheno phen.txt --out test

######################
### GCTA does not work well, so use LDSC on summary stats
### Now run LDSC using the computed LD values. Run on FASRC
git clone https://github.com/bulik/ldsc.git
cd ldsc
module load python/3.10.12-fasrc01
mamba activate ldsc
wget https://zenodo.org/records/8182036/files/eur_w_ld_chr.tar.gz?download=1
mv 'eur_w_ld_chr.tar.gz?download=1' eur_w_ld_chr.tar.gz

python munge_sumstats.py \
--sumstats /n/home09/jwillett/true_lab_storage/00_AoU/ad_any_gwas_common.ma \
--snp ID --N-col N --a1 ALLELE1 --a2 ALLELE0 --p P --frq A1FREQ --a1-inc \
--out /n/home09/jwillett/true_lab_storage/00_AoU/munged_ad_any 

# LD Score Regression
python ldsc.py \
--h2 /n/home09/jwillett/true_lab_storage/00_AoU/munged_ad_any.sumstats.gz \
--ref-ld /n/home09/jwillett/true_lab_storage/Data_Links/LD_Ref/eur_w_ld_chr \
--w-ld /n/home09/jwillett/true_lab_storage/Data_Links/LD_Ref/eur_w_ld_chr \
--out /n/home09/jwillett/true_lab_storage/00_AoU/ad_any_herit_aou

